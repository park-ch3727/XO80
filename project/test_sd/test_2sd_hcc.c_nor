#include <sys/ioctl.h>
#include <assert.h>
#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include "fat/api/api_fat.h"
#include "ite/itp.h"
#include "ite/ite_sd.h"
#include "nor/mmp_nor.h"
#include "ssp/mmp_spi.h"

//#define LOW_LEVEL_TEST

#if defined(LOW_LEVEL_TEST)
void SD_LowLevelTest(void);
#endif

#if defined(WIN32)
#define err()   do { while(1); }while(0)
#else
#define err()  do { vTaskSuspendAll(); while(1); } while(0)
#endif


extern F_DRIVER * mmcsd_initfunc(unsigned long driver_param);

static uint32_t fileNum[2];
static uint8_t  filePath[2][128];

#define LOOP_NUM    8*2
#define BUF_SIZE    128*1024

#define SPI_SEL	SPI_0
#define FUNC_MSG(x)	printf(x)
pthread_t                VP1task;
pthread_attr_t           VP1attr;


static uint8_t*  pattern[2];
static uint8_t*  readBuf[2];

/** in itp_fat.c */
struct
{
    int sd;                 // sd0 or sd1
    int removable;          // removable or not
    unsigned long reserved; // reserved size
} sdDrvParams[2] =
{
    {
        0,
    #ifdef CFG_SD0_STATIC
        0,
        CFG_SD0_RESERVED_SIZE
    #else
        1,
        0
    #endif // CFG_SD0_STATIC
    },
    {
        1,
    #ifdef CFG_SD1_STATIC
        0,
        CFG_SD1_RESERVED_SIZE
    #else
        1,
        0
    #endif // CFG_SD1_STATIC
    },
};


void nor_test_insanity_write()
{
	uint32_t	norSize = NorGetCapacity(SPI_SEL, SPI_CSN_0);
	uint32_t	writeOffset = 0;
	uint32_t	writeSize = 0;
	uint32_t	i = 0;

	printf("\n========================================\n");
	printf("   %s\n", __FUNCTION__);
	printf("========================================\n");	
	for (writeOffset = 0; writeOffset < norSize; writeOffset++)
	{
		for (writeSize = 1; writeSize < (norSize - writeOffset); writeSize++)
		{
			uint32_t	bufferSize = writeSize;
			uint8_t*	buffer = (uint8_t*)memalign(32, bufferSize);
			uint8_t*	readBackRuffer = (uint8_t*)memalign(32, bufferSize);

			if (buffer)
			{
				for (i = 0; i < bufferSize; i++)
				{
					buffer[i] = (uint8_t)('g' + writeSize);
				}
				printf("\tWrite %d Bytes to address 0x%02X......", writeSize, writeOffset);
				if (NorWrite(SPI_SEL, SPI_CSN_0, writeOffset, buffer, bufferSize))
				{
					printf("fail.\n");
					while(1);
				}
				else
				{
					printf("success.\n");
				}
			}
			else
			{
				FUNC_MSG("Out of memory.\n");
				while(1);
			}

			if (readBackRuffer)
			{
				printf("\tRead %d Bytes from address 0x%02X......", writeSize, writeOffset);
				if (NorRead(SPI_SEL, SPI_CSN_0, writeOffset, readBackRuffer, bufferSize))
				{
					printf("fail.\n");
					while(1);
				}
				else
				{
					printf("success.\n");
				}
			}
			else
			{
				FUNC_MSG("Out of memory.\n");
				while(1);
			}

			printf("\tData comparison......");
			if (memcmp(buffer, readBackRuffer, bufferSize) == 0)
			{
				printf("ok.\n");
			}
			else
			{
				printf("fail.\n");
				for(i=0; i< bufferSize; i++)
					printf("buffer[%d]=0x%x, readBackRuffer[%d]=0x%x\n", i, buffer[i], i, readBackRuffer[i]);
				while(1);
			}
			printf("\n");

			free(buffer);
			free(readBackRuffer);
		}
	}
}

void nor_test_write_without_erase()
{
	uint32_t	i = 0;
	uint32_t	norSize = NorGetCapacity(SPI_SEL, SPI_CSN_0);
	uint32_t	address = 0;
	uint32_t	bufferSize = 256;
	uint8_t*	buffer = NULL;
	uint8_t*	readBackBuffer = NULL;
	bool		result = true;

	printf("\n========================================\n");
	printf("   %s\n", __FUNCTION__);
	printf("========================================\n");

	buffer = (uint8_t*)memalign(32, bufferSize);
	if (buffer == NULL)
	{
		FUNC_MSG("Out of memory.\n");
		return;
	}
	readBackBuffer = (uint8_t*)memalign(32, norSize);
	if (readBackBuffer == NULL)
	{
		FUNC_MSG("Out of memory.\n");
		return;
	}

	for (i = 0; i < bufferSize; i++)
	{
		buffer[i] = 'z' + i;
	}
	printf("\tErase all block.\n");
	if (NorEraseAll(SPI_SEL, SPI_CSN_0))
	{
		FUNC_MSG("NorEraseAll() fail.");
	}
	printf("\tWrite 256 Bytes, from 0 to 0x%08X", norSize - 1);
	address = 0;
	while(address < norSize)
	{
		if (NorWriteWithoutErase(SPI_SEL, SPI_CSN_0, address, buffer, bufferSize))
		{
			FUNC_MSG("NorWriteWithoutErase() fail.\n");
		}
		address += bufferSize;
		if ((address % 65536) == 0)
		{
			printf("."); fflush(stdout);
		}
	}
	printf("success.\n");

	printf("\tRead back to validation...");
	if (NorRead(SPI_SEL, SPI_CSN_0, 0, readBackBuffer, norSize))
	{
		FUNC_MSG("NorRead() fail.\n");
	}
	for (i = 0; i < norSize; i++)
	{
		if (readBackBuffer[i] != ((uint8_t)('z' + i)))
		{
			printf("fail.\n");
			printf("\tByte %d should be 0x%02X, but it was 0x%02X.\n", i, ((uint8_t)('z' + i)), readBackBuffer[i]);
			result = false;
			break;
		}
	}
	if (result == true)
	{
		printf("success.\n");
	}
	free(readBackBuffer);
}

void nor_test_erase_all()
{
	uint32_t	bufferSize = NorGetCapacity(SPI_SEL, SPI_CSN_0);
	uint8_t*	readBackBuffer = (uint8_t*)memalign(32, bufferSize);
	uint32_t	i = 0;
	bool		testResult = true;
	printf("\n========================================\n");
	printf("   %s\n", __FUNCTION__);
	printf("========================================\n");
	printf("\tErase all block.\n");
	if (NorEraseAll(SPI_SEL, SPI_CSN_0))
	{
		FUNC_MSG("NorEraseAll() fail.");
	}
	printf("\tRead data back, all bytes should be 0xFF");
	if (NorRead(SPI_SEL, SPI_CSN_0, 0, readBackBuffer, bufferSize))
	{
		FUNC_MSG("NorRead() fail.");
	}
	for (i = 0; i < bufferSize; i++)
	{
		if (readBackBuffer[i] != 0xFF)
		{
			printf("..........failed. Data[%d] != 0xFF, All bytes should be 0xFF!\n", i);
			testResult = false;
			break;
		}
	}
	if (testResult == true)
	{
		printf("..........success.\n");
	}
	free(readBackBuffer);
}

void nor_write_test3()
{
    const uint32_t TEST_BUFFER_SIZE = 128 * 1024;//512 * 1024;

	uint8_t*	writeBuffer = (uint8_t*)memalign(32, TEST_BUFFER_SIZE);
	uint8_t*	readBackBuffer = (uint8_t*)memalign(32, TEST_BUFFER_SIZE);
	uint32_t	i = 0;
	uint32_t	writeAddress = 0;
	struct timeval	t1, t2;
	double		elapsedTime;

	printf("\n========================================\n");
	printf("   NOR: Simple Write Test\n");
	printf("========================================\n");
	for (i = 0; i < TEST_BUFFER_SIZE; i++)
	{
		writeBuffer[i] = 'B' + i;
	}

	writeAddress = 0;
	gettimeofday(&t1, NULL);
	if (NorWrite(SPI_SEL, SPI_CSN_0, writeAddress, writeBuffer, TEST_BUFFER_SIZE))
	{
		FUNC_MSG("NorWrite() fail.\n");
	}
	gettimeofday(&t2, NULL);
	elapsedTime = (t2.tv_sec - t1.tv_sec) * 1000.0;			// sec to ms
    elapsedTime += ((t2.tv_usec - t1.tv_usec) / 1000.0);	// us to ms
    printf("\tWrite %.2f MB, take %.2f ms, %.2f MB/S\n", (double)TEST_BUFFER_SIZE/1024.0/1024.0, elapsedTime, (double)TEST_BUFFER_SIZE/1024.0/1024.0/(elapsedTime / 1000));
    gettimeofday(&t1, NULL);
	if (NorRead(SPI_SEL, SPI_CSN_0, writeAddress, readBackBuffer, TEST_BUFFER_SIZE))
	{
		FUNC_MSG("NorRead() fail.\n");
	}
	gettimeofday(&t2, NULL);
	elapsedTime = (t2.tv_sec - t1.tv_sec) * 1000.0;			// sec to ms
    elapsedTime += ((t2.tv_usec - t1.tv_usec) / 1000.0);	// us to ms
    printf("\tRead %.2f MB, take %.2f ms, %.2f MB/S\n", (double)TEST_BUFFER_SIZE/1024.0/1024.0, elapsedTime, (double)TEST_BUFFER_SIZE/1024.0/1024.0/(elapsedTime / 1000));
	if (memcmp(readBackBuffer, writeBuffer, TEST_BUFFER_SIZE) != 0)
	{
		uint32_t printCount = 0;

		printf("\t....................data compare fail.\n");
		for (i = 0; i < TEST_BUFFER_SIZE; i++)
		{
			if (readBackBuffer[i] != writeBuffer[i])
			{
				printf("readBackBuffer[%d](0x%02X) != writeBuffer[%d](0x%02X)\n", i, readBackBuffer[i], i, writeBuffer[i]);
				printCount++;
			}
			if (printCount >= 32)
			{
								
				//break;
			}
		}
		err();
	}
	else
	{
		printf("\t....................success.\n");
	}
	free(writeBuffer);
	free(readBackBuffer);
}

void nor_write_test2()
{
    const uint32_t TEST_BUFFER_SIZE = 128 * 1024;//4 * 1024 * 1024;

	uint8_t*	writeBuffer = (uint8_t*)memalign(32, TEST_BUFFER_SIZE);
	uint8_t*	readBackBuffer = (uint8_t*)memalign(32, TEST_BUFFER_SIZE);
	uint32_t	i = 0;
	uint32_t	writeAddress = 0;
	struct timeval	t1, t2;
	double		elapsedTime;

	printf("\n========================================\n");
	printf("   NOR: Performance Test\n");
	printf("========================================\n");
	for (i = 0; i < TEST_BUFFER_SIZE; i++)
	{
		writeBuffer[i] = 'A' + i;
	}

	writeAddress = 0;
	gettimeofday(&t1, NULL);
	if (NorWrite(SPI_SEL, SPI_CSN_0, writeAddress, writeBuffer, TEST_BUFFER_SIZE))
	{
		FUNC_MSG("NorWrite() fail.\n");
	}
	gettimeofday(&t2, NULL);
	elapsedTime = (t2.tv_sec - t1.tv_sec) * 1000.0;			// sec to ms
    elapsedTime += ((t2.tv_usec - t1.tv_usec) / 1000.0);	// us to ms
    printf("\tWrite %.2f MB, take %.2f ms, %.2f MB/S\n", (double)TEST_BUFFER_SIZE/1024.0/1024.0, elapsedTime, (double)TEST_BUFFER_SIZE/1024.0/1024.0/(elapsedTime / 1000));
    gettimeofday(&t1, NULL);
	if (NorRead(SPI_SEL, SPI_CSN_0, writeAddress, readBackBuffer, TEST_BUFFER_SIZE))
	{
		FUNC_MSG("NorRead() fail.\n");
	}
	gettimeofday(&t2, NULL);
	elapsedTime = (t2.tv_sec - t1.tv_sec) * 1000.0;			// sec to ms
    elapsedTime += ((t2.tv_usec - t1.tv_usec) / 1000.0);	// us to ms
    printf("\tRead %.2f MB, take %.2f ms, %.2f MB/S\n", (double)TEST_BUFFER_SIZE/1024.0/1024.0, elapsedTime, (double)TEST_BUFFER_SIZE/1024.0/1024.0/(elapsedTime / 1000));
	if (memcmp(readBackBuffer, writeBuffer, TEST_BUFFER_SIZE) != 0)
	{
		uint32_t printCount = 0;

		printf("\t....................data compare fail.\n");
		for (i = 0; i < TEST_BUFFER_SIZE; i++)
		{
			if (readBackBuffer[i] != writeBuffer[i])
			{
				printf("readBackBuffer[%d](0x%02X) != writeBuffer[%d](0x%02X)\n", i, readBackBuffer[i], i, writeBuffer[i]);
				printCount++;
			}
			if (printCount >= 32)
			{
								
				//break;
			}
		}
		err();
	}
	else
	{
		printf("\t....................success.\n");
	}
	free(writeBuffer);
	free(readBackBuffer);
}

bool nor_write_test1()
{
    const uint32_t TEST_BUFFER_SIZE = 128 * 1024;// 2097152;//256 * 1024;

	uint8_t*	writeBuffer = (uint8_t*)memalign(32, TEST_BUFFER_SIZE);
	uint8_t*	readBackBuffer = (uint8_t*)memalign(32, TEST_BUFFER_SIZE);
	uint32_t	i = 0;
	uint32_t	writeAddress = 0;
    //uint32_t    addressOffsets[] = {0, 1, 2 + 65535, 3 + 65535 * 2};
    //uint32_t    addressOffsets[] = {0};
    uint32_t    addressOffsets[] = {0, 2097152, 2097152*2, 2097152*3, 2097152*4, 2097152*5, 2097152*6, 2097152*7,
	                               2097152*8, 2097152*9, 2097152*10, 2097152*11, 2097152*12, 2097152*13, 2097152*14, 2097152*15};
	uint32_t	addressOffsetIndex = 0;
	bool        result = true;

	printf("\n========================================\n");
	printf("   NOR: Data Validation\n");
	printf("========================================\n");
	printf("\tInit write buffer\n");
	for (i = 0; i < TEST_BUFFER_SIZE; i++)
	{
		writeBuffer[i] = 'a' + i;
	}
	for (addressOffsetIndex = 0; addressOffsetIndex < (sizeof(addressOffsets) / sizeof(addressOffsets[0])); addressOffsetIndex++)
	{
        printf("=============addressOffsetIndex: %d======================\n", addressOffsetIndex);
		writeAddress = addressOffsets[addressOffsetIndex];
		printf("\tWrite test buffer to address 0x%08X\n", writeAddress);
		if (NorWrite(SPI_SEL, SPI_CSN_0, writeAddress, writeBuffer, TEST_BUFFER_SIZE))
		{
			FUNC_MSG("NorWrite() fail.\n");
			result = false;
			goto end;
		}
		printf("\tRead back for verify");
		memset(readBackBuffer, 0x00, TEST_BUFFER_SIZE);
		if (NorRead(SPI_SEL, SPI_CSN_0, writeAddress, readBackBuffer, TEST_BUFFER_SIZE))
		{
			FUNC_MSG("NorRead() fail.\n");
			result = false;
			goto end;
		}
		if (memcmp(readBackBuffer, writeBuffer, TEST_BUFFER_SIZE) != 0)
		{
			uint32_t printCount = 0;
			printf("....................fail.\n");
			result = false;	
            //goto end;
			for (i = 0; i < TEST_BUFFER_SIZE; i++)
			{
				if (readBackBuffer[i] != writeBuffer[i])
				{
                    printf("readBackBuffer[%d](0x%02X) != writeBuffer[%d](0x%02X)\n", i, readBackBuffer[i], i, writeBuffer[i]);
					printCount++;
				}
				if (printCount >= 32)
				{
									
					//break;
				}
			}
			err();
		}
		else
		{
			printf("....................success.\n");
		}
	}
	end:
	free(writeBuffer);
	free(readBackBuffer);
	return result;
}

void TestFunc2(void* arg)
{
    NorInitial(SPI_SEL, SPI_CSN_0);

    //test_nor_clk_window();
    while(1)
    {
        nor_write_test1();
        nor_write_test2();
        nor_write_test3();
       // nor_test_erase_all();
       // nor_test_write_without_erase();
    }
    nor_test_insanity_write();
}


void SD_FileReadWriteTest(int taskId)
{
    int res;
    uint32_t i, diff;
    FN_FILE* file = NULL;
//if(taskId==0) return; // 0: disable sd0, 1: disable sd2
    //sprintf(filePath[taskId], "%s:\\sd_%04X.dat", (taskId ? "B" : "A"), fileNum[taskId]++);
    sprintf(filePath[taskId], "%s:\\sd_%04X.dat", (taskId ? "B" : "A"), fileNum[taskId]);
    printf("%s \n", filePath[taskId]);

    pattern[taskId] = malloc(BUF_SIZE+32)+1;
    readBuf[taskId] = malloc(BUF_SIZE+32)+2;
    printf(" %X %X \n", pattern[taskId], readBuf[taskId]);

    /***************/
    /* initialize  */
    /***************/
#if 1//defined(CFG_MMC_ENABLE)
	{
		SD_CARD_INFO card_info = { 0 };
        printf("iteSdcInitialize() \n ");
		iteSdcInitialize(taskId, &card_info);
		if ((card_info.type != SD_TYPE_MMC) && (card_info.type != SD_TYPE_SD)) {
			printf("iteSdcInitialize() no available card type! %d \n", card_info.type);
			while (1);
		}
	}
#endif
	iteSdInitializeEx(taskId);
    res = f_initvolume(taskId, mmcsd_initfunc, (unsigned long)&sdDrvParams[taskId]);
    if(res)
    {
        printf(" T-%s: initvolume fail! \n", (taskId ? "B" : "A"));
        err();
    }
    printf(" T-%s: initvolume ok! \n", (taskId ? "B" : "A"));

    for(i=0; i<BUF_SIZE; i++) /** fill pattern */
        pattern[taskId][i] = (fileNum[taskId]+i) % 0x100;

    /***************/
    /* Write       */
    /***************/
    file = f_open(filePath[taskId], "w");
    if(!file)
    {
        printf(" T-%s: open %s for write fail! \n\n", (taskId ? "B" : "A"), filePath[taskId]);
        err();
    }
    printf(" T-%s: write data.... \n", (taskId ? "B" : "A"));
    for(i=0; i<LOOP_NUM; i++)
    {
		printf("T-%s:@\n", (taskId ? "B" : "A"));
        res = f_write(pattern[taskId], 1, BUF_SIZE, file);
        if(res != BUF_SIZE)
        {
            printf(" T-%s: real write size 0x%X != write size 0x%X \n", (taskId ? "B" : "A"), res, BUF_SIZE);
            err();
        }
    }
    res = 0;
    f_flush(file);
    printf(" T-%s: Write finish!\n", (taskId ? "B" : "A"));
    if(file)
    {
        f_close(file);
        file = NULL;
    }

    /*******************/
    /* Read & Compare  */
    /*******************/
    printf(" T-%s: compare data! \n", (taskId ? "B" : "A"));
    file = f_open(filePath[taskId], "r");
    if(!file)
    {
        printf(" T-%s: open %s for read fail! \n\n", (taskId ? "B" : "A"), filePath[taskId]);
        err();
    }
	printf(" T-%s: read data from card.. \n", (taskId ? "B" : "A"));
    for(i=0; i<LOOP_NUM; i++)
    {
        printf("T-%s:#\n", (taskId ? "B" : "A"));
        memset(readBuf[taskId], 0x55, BUF_SIZE);
        res = f_read(readBuf[taskId], 1, BUF_SIZE, file);
        if(res != BUF_SIZE)
        {
            printf(" T-%s: read back size 0x%X != read size 0x%X \n", (taskId ? "B" : "A"), res, BUF_SIZE);
            err();
        }
        diff = memcmp((void*)pattern[taskId], (void*)readBuf[taskId], BUF_SIZE);
        if(diff)
            printf(" T-%s: diff = %d, readBuf = 0x%X \n", (taskId ? "B" : "A"), diff, readBuf[taskId]);

        if(diff)
		{
			uint32_t j = 0, count=0;
			printf(" i = %d \n", i);
			for(j=0; j<BUF_SIZE; j++)
			{
				if(pattern[taskId][j] != readBuf[taskId][j])
                {
					printf(" T-%s: write buffer[%X] = %02X, read buffer1[%X] = %02X \n", (taskId ? "B" : "A"), j, pattern[taskId][j], j, readBuf[taskId][j]);
                    if(count++ > 50)
                        while(1);
                }
			}
			err();
		}
    }
    res = 0;
    printf("T-%s: Compare Data End!!\n\n\n", (taskId ? "B" : "A"));
    if(file)
    {
        f_close(file);
        file = NULL;
    }
    res = f_delvolume(taskId);
    if(res)
        printf(" delvolume fail! \n");

    free(pattern[taskId]-1);
    free(readBuf[taskId]-2);

    printf("iteSdcTerminate() \n ");
    iteSdcTerminate(taskId);

    //usleep(2*1000*1000);
}

static void* TaskFunc(void* arg)
{
    int taskId = *(int*)arg;
    uint32_t loopCnt = 0;

    f_enterFS(); 

    while(1)
    {
        if(ithCardInserted((taskId==SD_0) ? ITH_CARDPIN_SD0 : ITH_CARDPIN_SD1))
        {
            loopCnt++;
            SD_FileReadWriteTest(taskId);
        }
        usleep(10*1000);
    }
}

void* TestFunc(void* arg)
{
#define TEST_STACK_SIZE 10240
    pthread_t task[2];
    pthread_attr_t attr[2];
    int i;
    int taskId[2];

#if defined(LOW_LEVEL_TEST)
	SD_LowLevelTest();
	printf("stop and while(1)\n");
	while (1);
#endif

    pthread_attr_init(&VP1attr);
    pthread_create(&VP1task, &VP1attr, TestFunc2, NULL);

    fs_init(); 
    fs_start();

    for(i=0; i<2; i++)
    {
        taskId[i] = i;
        pthread_attr_init(&attr[i]);
        pthread_attr_setstacksize(&attr[i], TEST_STACK_SIZE);
        pthread_create(&task[i], &attr[i], TaskFunc, &taskId[i]);
    }

    while(1) 
        sleep(1);
}


#if defined(LOW_LEVEL_TEST)

void SD_LowLevelTest(void)
{
	static uint8_t buf0[512] = { 0 };
	static uint8_t buf1[512] = { 0 };
#if 1//defined(CFG_MMC_ENABLE)
	{
		SD_CARD_INFO card_info = { 0 };
		iteSdcInitialize(0, &card_info);
		if ((card_info.type != SD_TYPE_MMC) && (card_info.type != SD_TYPE_SD)) {
			printf("iteSdcInitialize() no available card type! %d \n", card_info.type);
			while (1);
		}
	}
	printf("... \n");

	{
		SD_CARD_INFO card_info = { 0 };
		iteSdcInitialize(1, &card_info);
		if ((card_info.type != SD_TYPE_MMC) && (card_info.type != SD_TYPE_SD)) {
			printf("iteSdcInitialize() no available card type! %d \n", card_info.type);
			while (1);
		}
	}
#endif

	iteSdInitializeEx(0);
	iteSdInitializeEx(1);
	iteSdReadMultipleSectorEx(0, 0, 1, buf0);
	iteSdReadMultipleSectorEx(1, 0, 1, buf1);
	iteSdWriteMultipleSectorEx(0, 0, 1, buf0);
	iteSdWriteMultipleSectorEx(1, 0, 1, buf1);

}

#endif
