#ifndef ITP_SYS_UNISTD_H
#define ITP_SYS_UNISTD_H

#undef __STDC__
#define __STDC__ 1
#include <io.h>
#undef __STDC__
#define __STDC__ 0

#ifndef CFG_WIN32_FS_HW
    #include "$ENV{CFG_WINSDK_INC_PATH}/direct.h"
#endif // !CFG_WIN32_FS_HW

#include <sys/types.h>

#ifdef __cplusplus
extern "C"
{
#endif

#define	F_OK	0
#define	R_OK	4
#define	W_OK	2
#define	X_OK	0

#define STDIN_FILENO    0       /* standard input file descriptor */
#define STDOUT_FILENO   1       /* standard output file descriptor */
#define STDERR_FILENO   2       /* standard error file descriptor */

#define _SC_OPEN_MAX                      4
#define _SC_PAGESIZE                      8
#define _SC_NPROCESSORS_ONLN             10
#define _SC_PAGE_SIZE                     _SC_PAGESIZE
#define _SC_GETGR_R_SIZE_MAX             50
#define _SC_GETPW_R_SIZE_MAX             51
#define _SC_MONOTONIC_CLOCK              69

#define _PC_NAME_MAX                      3

#define dup _dup
#define dup2 _dup2

int gethostname(char *__name, size_t __len);
unsigned sleep(unsigned int __seconds);
int usleep(useconds_t __useconds);
long sysconf(int __name );
long pathconf(const char *__path, int __name);
pid_t fork(void);
int pipe(int __fildes[2]);
uid_t getuid(void);
uid_t geteuid(void);
pid_t getpid(void);
gid_t getgid(void);
int close(int s);
int read(int s, void *mem, size_t len);
int write(int s, const void *dataptr, size_t size);
int lseek(int file, int ptr, int dir);
int	daemon(int nochdir, int noclose);
ssize_t readlink(const char *path, char *buf, size_t bufsiz);
int symlink(const char *name1, const char *name2);
int truncate(const char *path, off_t length);
int	getpagesize(void);

#ifdef __cplusplus
}
#endif

#endif // ITP_SYS_UNISTD_H
